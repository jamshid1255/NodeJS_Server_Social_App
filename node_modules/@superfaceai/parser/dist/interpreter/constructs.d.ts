import * as ts from 'typescript';
import { CharIndexSpan } from '../common/source';
import { ValidationIssue } from './issue';
import { ObjectStructure, StructureType } from './profile-output';
export declare type TypescriptIdentifier = ts.Identifier | ts.PropertyAccessExpression | ts.ElementAccessExpression;
export declare type ReferencedVariables = {
    jessieNode: TypescriptIdentifier;
    type: StructureType;
};
export declare type RelativeValidationIssue = ValidationIssue & {
    context: {
        path: {
            relativeSpan: CharIndexSpan;
        };
    };
};
export declare type ConstructResult = {
    variables?: ReferencedVariables[];
    invalidInput: boolean;
    invalidOutput: boolean;
} & ({
    pass: true;
    warnings: RelativeValidationIssue[];
} | {
    pass: false;
    warnings: RelativeValidationIssue[];
    errors: RelativeValidationIssue[];
});
export interface VisitConstruct<T extends ts.Node = ts.Node> {
    visit(node: T, outputStructure?: StructureType, inputStructure?: ObjectStructure, isOutcomeWithCondition?: boolean): ConstructResult;
}
export declare function visitConstruct(node: ts.Node, outputStructure?: StructureType, inputStructure?: ObjectStructure, isOutcomeWithCondition?: boolean, construct?: VisitConstruct): ConstructResult;
export declare const RETURN_CONSTRUCTS: {
    [kind in ts.SyntaxKind]?: VisitConstruct;
};

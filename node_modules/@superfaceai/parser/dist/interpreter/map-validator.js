"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapValidator = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var script_1 = require("../common/script");
var source_1 = require("../common/source");
var _1 = require(".");
var constructs_1 = require("./constructs");
var profile_output_utils_1 = require("./profile-output.utils");
var utils_1 = require("./utils");
var debug = (0, debug_1.default)('superface-parser:map-validator');
function assertUnreachable(node) {
    throw new Error("Invalid Node kind: ".concat(node.kind));
}
var MapValidator = /** @class */ (function () {
    function MapValidator(mapAst, profileOutput) {
        this.mapAst = mapAst;
        this.profileOutput = profileOutput;
        this.stack = [];
        this.errors = [];
        this.warnings = [];
        this.operations = {};
        this.isOutcomeWithCondition = false;
    }
    MapValidator.prototype.validate = function () {
        this.visit(this.mapAst);
        return this.errors.length > 0
            ? { pass: false, errors: this.errors, warnings: this.warnings }
            : { pass: true, warnings: this.warnings };
    };
    MapValidator.prototype.visit = function (node) {
        debug('Visiting node: ' + node.kind);
        switch (node.kind) {
            case 'MapDocument':
                return this.visitMapDocumentNode(node);
            case 'MapHeader':
                return this.visitMapHeaderNode(node);
            case 'OperationDefinition':
                return this.visitOperationDefinitionNode(node);
            case 'MapDefinition':
                return this.visitMapDefinitionNode(node);
            case 'HttpCallStatement':
                return this.visitHttpCallStatementNode(node);
            case 'HttpResponseHandler':
                return this.visitHttpResponseHandlerNode(node);
            case 'HttpRequest':
                return this.visitHttpRequestNode(node);
            case 'CallStatement':
                return this.visitCallStatementNode(node);
            case 'OutcomeStatement':
                return this.visitOutcomeStatementNode(node);
            case 'SetStatement':
                return this.visitSetStatementNode(node);
            case 'ConditionAtom':
                return this.visitConditionAtomNode(node);
            case 'IterationAtom':
                return this.visitIterationAtomNode(node);
            case 'Assignment':
                return this.visitAssignmentNode(node);
            case 'InlineCall':
                return this.visitInlineCallNode(node);
            case 'JessieExpression':
                return this.visitJessieExpressionNode(node);
            case 'ObjectLiteral':
                return this.visitObjectLiteralNode(node);
            case 'PrimitiveLiteral':
                return this.visitPrimitiveLiteralNode(node);
            default:
                assertUnreachable(node);
        }
    };
    MapValidator.prototype.visitMapDocumentNode = function (node) {
        var e_1, _a, e_2, _b;
        var _this = this;
        // check the valid ProfileID
        this.visit(node.header);
        // store operations
        node.definitions.forEach(function (definition) {
            if ((0, ast_1.isOperationDefinitionNode)(definition)) {
                _this.operations[definition.name] = definition;
            }
        });
        // all usecases & maps
        var maps = node.definitions.filter(ast_1.isMapDefinitionNode);
        var mapNames = maps.map(function (map) { return map.name; });
        var usecaseNames = this.profileOutput.usecases.map(function (usecase) { return usecase.useCaseName; });
        // found usecases
        var validMaps = maps.filter(function (map) { return usecaseNames.includes(map.name); });
        // not found usecases
        var extraMaps = mapNames.filter(function (name) { return !usecaseNames.includes(name); });
        var notFoundMaps = usecaseNames.filter(function (usecase) { return !mapNames.includes(usecase); });
        try {
            for (var notFoundMaps_1 = __values(notFoundMaps), notFoundMaps_1_1 = notFoundMaps_1.next(); !notFoundMaps_1_1.done; notFoundMaps_1_1 = notFoundMaps_1.next()) {
                var map = notFoundMaps_1_1.value;
                this.errors.push({
                    kind: 'mapNotFound',
                    context: {
                        path: this.getPath(node),
                        expected: map,
                    },
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (notFoundMaps_1_1 && !notFoundMaps_1_1.done && (_a = notFoundMaps_1.return)) _a.call(notFoundMaps_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (extraMaps.length > 0) {
            this.warnings.push({
                kind: 'extraMapsFound',
                context: {
                    path: this.getPath(node),
                    expected: usecaseNames,
                    actual: mapNames,
                },
            });
        }
        var _loop_1 = function (map) {
            this_1.currentUseCase = this_1.profileOutput.usecases.find(function (usecase) { return usecase.useCaseName === map.name; });
            this_1.visit(map);
        };
        var this_1 = this;
        try {
            for (var validMaps_1 = __values(validMaps), validMaps_1_1 = validMaps_1.next(); !validMaps_1_1.done; validMaps_1_1 = validMaps_1.next()) {
                var map = validMaps_1_1.value;
                _loop_1(map);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (validMaps_1_1 && !validMaps_1_1.done && (_b = validMaps_1.return)) _b.call(validMaps_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    MapValidator.prototype.visitMapHeaderNode = function (node) {
        var _a = this.profileOutput.header, scope = _a.scope, name = _a.name, profileVersion = _a.version;
        if ((scope && scope !== node.profile.scope) ||
            (!scope && node.profile.scope)) {
            this.errors.push({
                kind: 'wrongScope',
                context: {
                    path: this.getPath(node),
                    expected: scope,
                    actual: node.profile.scope,
                },
            });
        }
        if (node.profile.name !== name) {
            this.errors.push({
                kind: 'wrongProfileName',
                context: {
                    path: this.getPath(node),
                    expected: name,
                    actual: node.profile.name,
                },
            });
        }
        // map should be compatible with every patch version of a profile, therefore it should ignore patch version
        var mapVersion = node.profile.version;
        if (mapVersion.major !== profileVersion.major ||
            mapVersion.minor !== profileVersion.minor) {
            this.errors.push({
                kind: 'wrongProfileVersion',
                context: {
                    path: this.getPath(node),
                    expected: profileVersion,
                    actual: mapVersion,
                },
            });
        }
    };
    MapValidator.prototype.visitOperationDefinitionNode = function (_node) {
        throw new Error('Method not implemented.');
    };
    MapValidator.prototype.visitMapDefinitionNode = function (node) {
        var _this = this;
        var _a, _b;
        var usecase = this.currentUseCase;
        if (!usecase) {
            throw new Error('Usecase should be defined!');
        }
        if (((_a = usecase.result) === null || _a === void 0 ? void 0 : _a.kind) === 'NonNullStructure' &&
            (0, utils_1.getOutcomes)(node, false).length === 0) {
            this.errors.push({
                kind: 'outcomeNotDefined',
                context: {
                    path: this.getPath(node),
                    slot: _1.UseCaseSlotType.RESULT,
                    expected: usecase.result,
                },
            });
        }
        if (((_b = usecase.error) === null || _b === void 0 ? void 0 : _b.kind) === 'NonNullStructure' &&
            (0, utils_1.getOutcomes)(node, true).length === 0) {
            this.errors.push({
                kind: 'outcomeNotDefined',
                context: {
                    path: this.getPath(node),
                    slot: _1.UseCaseSlotType.ERROR,
                    expected: usecase.error,
                },
            });
        }
        this.newStack('map', node.name);
        this.inputStructure = usecase.input;
        node.statements.forEach(function (statement) { return _this.visit(statement); });
        this.inputStructure = undefined;
        this.stack.pop();
    };
    MapValidator.prototype.visitHttpCallStatementNode = function (node) {
        var e_3, _a;
        var _this = this;
        var _b;
        var variableExpressions = (_b = node.url
            .match(/{([_A-Za-z][_0-9A-Za-z]*[.]?)*[_0-9A-Za-z]}/g)) === null || _b === void 0 ? void 0 : _b.map(function (expression) { return expression.slice(1, -1); });
        if (variableExpressions) {
            try {
                for (var variableExpressions_1 = __values(variableExpressions), variableExpressions_1_1 = variableExpressions_1.next(); !variableExpressions_1_1.done; variableExpressions_1_1 = variableExpressions_1.next()) {
                    var expression = variableExpressions_1_1.value;
                    this.visit({
                        kind: 'JessieExpression',
                        expression: expression,
                        location: node.location,
                    });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (variableExpressions_1_1 && !variableExpressions_1_1.done && (_a = variableExpressions_1.return)) _a.call(variableExpressions_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (node.request) {
            this.visit(node.request);
        }
        node.responseHandlers.forEach(function (response) { return _this.visit(response); });
    };
    MapValidator.prototype.visitHttpResponseHandlerNode = function (node) {
        var _this = this;
        this.newStack('httpResponse');
        node.statements.forEach(function (statement) { return _this.visit(statement); });
        this.stack.pop();
    };
    MapValidator.prototype.visitHttpRequestNode = function (node) {
        if (node.query) {
            this.visit(node.query);
        }
        if (node.headers) {
            this.visit(node.headers);
        }
        if (node.body) {
            this.visit(node.body);
        }
    };
    MapValidator.prototype.visitCallStatementNode = function (node) {
        var _this = this;
        if (node.arguments.length > 0) {
            node.arguments.forEach(function (argument) { return _this.visit(argument); });
        }
        this.newStack('call', node.operationName);
        node.statements.forEach(function (statement) { return _this.visit(statement); });
        this.stack.pop();
    };
    MapValidator.prototype.visitOutcomeStatementNode = function (node) {
        var _a, _b, _c, _d;
        if (node.condition) {
            this.visit(node.condition);
            this.isOutcomeWithCondition = true;
        }
        if (node.isError) {
            if (!((_a = this.currentUseCase) === null || _a === void 0 ? void 0 : _a.error)) {
                this.warnings.push({
                    kind: 'useCaseSlotNotFound',
                    context: {
                        path: this.getPath(node),
                        expected: _1.UseCaseSlotType.ERROR,
                        actual: node.value,
                    },
                });
            }
            this.currentStructure = (_b = this.currentUseCase) === null || _b === void 0 ? void 0 : _b.error;
        }
        else {
            if (!((_c = this.currentUseCase) === null || _c === void 0 ? void 0 : _c.result)) {
                this.warnings.push({
                    kind: 'useCaseSlotNotFound',
                    context: {
                        path: this.getPath(node),
                        expected: _1.UseCaseSlotType.RESULT,
                        actual: node.value,
                    },
                });
            }
            this.currentStructure = (_d = this.currentUseCase) === null || _d === void 0 ? void 0 : _d.result;
        }
        this.visit(node.value);
        this.isOutcomeWithCondition = false;
        this.currentStructure = undefined;
    };
    MapValidator.prototype.visitSetStatementNode = function (node) {
        var _this = this;
        node.assignments.forEach(function (assignment) {
            // Init new variables if object used in dot notation wasn't defined before
            if (assignment.key.length > 1) {
                var keys = [];
                for (var i = 0; i < assignment.key.length - 1; i++) {
                    var item = assignment.key[i];
                    keys.push(item);
                    if (_this.variables[keys.join('.')] === undefined) {
                        _this.addVariableToStack((0, _1.buildAssignment)(keys, {
                            kind: 'ObjectLiteral',
                            fields: [],
                            location: assignment.location,
                        }), true);
                    }
                }
            }
            _this.visit(assignment.value);
            if (!(0, ast_1.isInlineCallNode)(assignment.value)) {
                _this.addVariableToStack(assignment, false);
            }
        });
    };
    MapValidator.prototype.visitConditionAtomNode = function (node) {
        this.visit(node.expression);
    };
    MapValidator.prototype.visitIterationAtomNode = function (node) {
        this.visit(node.iterable);
    };
    MapValidator.prototype.visitAssignmentNode = function (node) {
        return this.visit(node.value);
    };
    MapValidator.prototype.visitInlineCallNode = function (node) {
        var _this = this;
        if (node.arguments.length > 0) {
            var originalStructure = this.currentStructure;
            // set current structure to undefined to validate only input
            this.currentStructure = undefined;
            node.arguments.forEach(function (argument) { return _this.visit(argument); });
            this.currentStructure = originalStructure;
        }
        return true;
    };
    MapValidator.mapRelativeValidationIssue = function (nodeSource, startLocation, issue) {
        var relativeSpan = script_1.ScriptExpressionCompiler.fixupRelativeSpan(issue.context.path.relativeSpan);
        // instead of reconstructing the issue we just delete the member
        delete issue.context.path.relativeSpan;
        var result = issue;
        // bail if we don't know the location
        if (startLocation === undefined) {
            return result;
        }
        // and set the location member
        result.context.path.location = {
            start: (0, source_1.computeEndLocation)(nodeSource.slice(0, relativeSpan.start), startLocation),
            end: (0, source_1.computeEndLocation)(nodeSource.slice(0, relativeSpan.end), startLocation),
        };
        return result;
    };
    MapValidator.prototype.visitJessieExpressionNode = function (node) {
        var _a, _b, e_4, _c;
        var _d, _e;
        var nodeSource = (_d = node.source) !== null && _d !== void 0 ? _d : node.expression;
        var rootNode = new script_1.ScriptExpressionCompiler(nodeSource).rawExpressionNode;
        var constructResult = (0, constructs_1.visitConstruct)(rootNode, this.currentStructure, this.inputStructure, this.isOutcomeWithCondition, constructs_1.RETURN_CONSTRUCTS[rootNode.kind]);
        var result = constructResult.pass;
        if (!constructResult.pass) {
            (_a = this.errors).push.apply(_a, __spreadArray([], __read(constructResult.errors.map(function (issue) {
                var _a;
                return MapValidator.mapRelativeValidationIssue(nodeSource, (_a = node.location) === null || _a === void 0 ? void 0 : _a.start, issue);
            })), false));
        }
        (_b = this.warnings).push.apply(_b, __spreadArray([], __read(constructResult.warnings.map(function (issue) {
            var _a;
            return MapValidator.mapRelativeValidationIssue(nodeSource, (_a = node.location) === null || _a === void 0 ? void 0 : _a.start, issue);
        })), false));
        try {
            // validate variables from jessie
            for (var _f = __values((_e = constructResult.variables) !== null && _e !== void 0 ? _e : []), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = _g.value, jessieNode = _h.jessieNode, type = _h.type;
                if (this.stackTop.type === 'httpResponse' &&
                    (0, utils_1.findTypescriptIdentifier)('body', jessieNode)) {
                    continue;
                }
                if (this.stackTop.type === 'call' &&
                    ((0, utils_1.findTypescriptIdentifier)('data', jessieNode) ||
                        (0, utils_1.findTypescriptIdentifier)('error', jessieNode))) {
                    continue;
                }
                var variableName = (0, utils_1.getVariableName)(jessieNode);
                var variable = this.variables[variableName];
                if (variable !== undefined) {
                    this.currentStructure = type;
                    result = this.visit(variable);
                    if (!result) {
                        this.addIssue({
                            kind: 'wrongVariableStructure',
                            context: {
                                path: this.getPath(node),
                                name: variableName,
                                expected: type,
                                actual: variable,
                            },
                        });
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return this.isOutcomeWithCondition ? true : result;
    };
    MapValidator.prototype.visitObjectLiteralNode = function (node) {
        var e_5, _a, e_6, _b;
        var _this = this;
        if (!this.currentStructure) {
            var result_1 = true;
            node.fields.forEach(function (field) {
                var fieldResult = _this.visit(field);
                result_1 && (result_1 = fieldResult);
            });
            return result_1;
        }
        if ((0, profile_output_utils_1.isNonNullStructure)(this.currentStructure)) {
            this.currentStructure = this.currentStructure.value;
        }
        if ((0, profile_output_utils_1.isScalarStructure)(this.currentStructure)) {
            return true;
        }
        var validationResult = (0, utils_1.validateObjectLiteral)(this.currentStructure, node);
        if (!validationResult.isValid) {
            this.addIssue({
                kind: 'wrongStructure',
                context: {
                    path: this.getPath(node),
                    expected: this.currentStructure,
                    actual: node,
                },
            });
            return this.isOutcomeWithCondition ? true : false;
        }
        // unpack here, otherwise TS fails to infer that is cannot be undefined
        var objectStructure = validationResult.objectStructure;
        if (objectStructure.fields === undefined) {
            throw new Error('Validated object structure is not defined or does not contain fields');
        }
        // all fields
        var profileFields = Object.entries(objectStructure.fields);
        var profileFieldNames = Object.keys(objectStructure.fields);
        var mapFieldNames = node.fields.map(function (field) { return field.key[0]; });
        // required fields
        var requiredFields = profileFields.filter(function (_a) {
            var _b = __read(_a, 2), value = _b[1];
            return value.required;
        });
        var requiredFieldsNotFound = requiredFields.filter(function (_a) {
            var _b = __read(_a, 1), key = _b[0];
            return !mapFieldNames.includes(key);
        });
        // fields found inside node
        var matchingFields = node.fields.filter(function (field) {
            return profileFieldNames.includes(field.key[0]);
        });
        var extraFields = node.fields.filter(function (field) { return !profileFieldNames.includes(field.key[0]); });
        var result = true;
        try {
            for (var matchingFields_1 = __values(matchingFields), matchingFields_1_1 = matchingFields_1.next(); !matchingFields_1_1.done; matchingFields_1_1 = matchingFields_1.next()) {
                var field = matchingFields_1_1.value;
                var visitResult = true;
                this.currentStructure = objectStructure.fields[field.key[0]];
                // it should not validate against final value when dot.notation is used
                if (field.key.length > 1) {
                    var _c = __read(field.key), tail = _c.slice(1);
                    var objectLiteral = {
                        kind: 'ObjectLiteral',
                        fields: [(0, _1.buildAssignment)(tail, field.value)],
                    };
                    visitResult = this.visit(objectLiteral);
                }
                else {
                    visitResult = this.visit(field);
                }
                result && (result = visitResult);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (matchingFields_1_1 && !matchingFields_1_1.done && (_a = matchingFields_1.return)) _a.call(matchingFields_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var requiredFieldsNotFound_1 = __values(requiredFieldsNotFound), requiredFieldsNotFound_1_1 = requiredFieldsNotFound_1.next(); !requiredFieldsNotFound_1_1.done; requiredFieldsNotFound_1_1 = requiredFieldsNotFound_1.next()) {
                var _d = __read(requiredFieldsNotFound_1_1.value, 2), value = _d[1];
                result = false;
                this.addIssue({
                    kind: 'missingRequired',
                    context: {
                        path: this.getPath(node),
                        expected: value ? value.kind : 'undefined',
                    },
                });
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (requiredFieldsNotFound_1_1 && !requiredFieldsNotFound_1_1.done && (_b = requiredFieldsNotFound_1.return)) _b.call(requiredFieldsNotFound_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        if (extraFields.length > 0) {
            this.warnings.push({
                kind: 'wrongObjectStructure',
                context: {
                    path: this.getPath(node),
                    expected: objectStructure,
                    actual: node,
                },
            });
        }
        return this.isOutcomeWithCondition ? true : result;
    };
    MapValidator.prototype.visitPrimitiveLiteralNode = function (node) {
        if (!this.currentStructure) {
            return true;
        }
        if ((0, profile_output_utils_1.isNonNullStructure)(this.currentStructure)) {
            this.currentStructure = this.currentStructure.value;
        }
        if ((0, profile_output_utils_1.isScalarStructure)(this.currentStructure)) {
            return true;
        }
        var isValid = (0, utils_1.validatePrimitiveLiteral)(this.currentStructure, node).isValid;
        if (!isValid) {
            this.addIssue({
                kind: 'wrongStructure',
                context: {
                    path: this.getPath(node),
                    expected: this.currentStructure,
                    actual: node,
                },
            });
        }
        return this.isOutcomeWithCondition ? true : isValid;
    };
    MapValidator.prototype.getPath = function (node) {
        return {
            kind: node.kind,
            location: node.location,
        };
    };
    /**
     * Handles storing variables with dot notation. If there is assignment with
     * multiple keys, there should be an object containing referenced or other field.
     * This function handles adding fields to object variable stored in validator for
     * later validation of this object.
     */
    MapValidator.prototype.handleVariable = function (assignment) {
        var e_7, _a, e_8, _b, _c;
        if (assignment.key.length > 1) {
            var keys = [];
            var tmpKeys = Array.from(assignment.key);
            try {
                for (var _d = __values(assignment.key), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var assignmentKey = _e.value;
                    keys.push(assignmentKey);
                    if (tmpKeys.length === 1) {
                        return;
                    }
                    tmpKeys.shift();
                    var isReassigned = false;
                    var variable = this.variables[keys.join('.')];
                    var value = {
                        kind: 'ObjectLiteral',
                        fields: [],
                        location: variable.location,
                    };
                    if (variable && (0, ast_1.isObjectLiteralNode)(variable)) {
                        var fieldKey = tmpKeys.join('.');
                        try {
                            for (var _f = (e_8 = void 0, __values(variable.fields)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var variableField = _g.value;
                                if (variableField.key.join('.') === fieldKey) {
                                    variableField.value = assignment.value;
                                    isReassigned = true;
                                }
                            }
                        }
                        catch (e_8_1) { e_8 = { error: e_8_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                            }
                            finally { if (e_8) throw e_8.error; }
                        }
                        (_c = value.fields).push.apply(_c, __spreadArray([], __read(variable.fields), false));
                    }
                    if (!isReassigned) {
                        value.fields.push((0, _1.buildAssignment)(Array.from(tmpKeys), assignment.value, assignment.location));
                    }
                    this.addVariableToStack((0, _1.buildAssignment)(keys, value), true);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    };
    MapValidator.prototype.addVariableToStack = function (assignment, handled) {
        var key = assignment.key.join('.');
        var variables = {};
        variables[key] = assignment.value;
        this.stackTop.variables = (0, utils_1.mergeVariables)(this.stackTop.variables, variables);
        if (!handled) {
            this.handleVariable(assignment);
        }
    };
    MapValidator.prototype.newStack = function (type, name) {
        name = name !== null && name !== void 0 ? name : this.stackTop.name;
        this.stack.push({ type: type, variables: {}, name: name });
    };
    Object.defineProperty(MapValidator.prototype, "variables", {
        get: function () {
            var e_9, _a;
            var variables = {};
            try {
                for (var _b = __values(this.stack), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var stackTop = _c.value;
                    variables = (0, utils_1.mergeVariables)(variables, stackTop.variables);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
            return variables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapValidator.prototype, "stackTop", {
        get: function () {
            if (this.stack.length === 0) {
                throw new Error('Trying to get variables out of scope!');
            }
            return this.stack[this.stack.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    MapValidator.prototype.addIssue = function (issue) {
        this.isOutcomeWithCondition
            ? this.warnings.push(issue)
            : this.errors.push(issue);
    };
    return MapValidator;
}());
exports.MapValidator = MapValidator;
//# sourceMappingURL=map-validator.js.map
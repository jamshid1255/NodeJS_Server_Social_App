"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invalidWithErrors = exports.validWithWarnings = void 0;
var __1 = require("..");
var example_validator_1 = require("../example-validator");
function isNotValid(_a) {
    var e_1, _b, e_2, _c;
    var result = _a.result, issues = _a.issues, errors = _a.errors, warnings = _a.warnings;
    var pass = false, message = '';
    if (!errors) {
        return {
            pass: !pass,
            message: function () { return 'Expected to fail, specify the errors'; },
        };
    }
    if (result.pass || result.errors.length === 0) {
        return {
            pass: !pass,
            message: function () { return 'Expected to fail, specified map is valid'; },
        };
    }
    var err = (0, __1.formatIssues)(issues.errors);
    var warn = (0, __1.formatIssues)(issues.warnings);
    message = 'Expected to find errors:\n';
    try {
        for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
            var error = errors_1_1.value;
            if (!err.includes(error)) {
                if (!pass) {
                    pass = true;
                }
                message += "\"".concat(error, "\"\n");
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (errors_1_1 && !errors_1_1.done && (_b = errors_1.return)) _b.call(errors_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    message += "in original errors:\n\"".concat(err, "\"\n");
    if (warnings && warnings.length > 0) {
        message += '\nExpected to find warnings:\n';
        try {
            for (var warnings_1 = __values(warnings), warnings_1_1 = warnings_1.next(); !warnings_1_1.done; warnings_1_1 = warnings_1.next()) {
                var warning = warnings_1_1.value;
                if (!warn.includes(warning)) {
                    if (!pass) {
                        pass = true;
                    }
                    message += "\"".concat(warning, "\"\n");
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (warnings_1_1 && !warnings_1_1.done && (_c = warnings_1.return)) _c.call(warnings_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        message += "in original warnings:\n\"".concat(warn, "\"\n");
    }
    return {
        pass: pass,
        message: function () { return message; },
    };
}
function isValid(_a) {
    var e_3, _b;
    var result = _a.result, issues = _a.issues, warnings = _a.warnings;
    var warn = (0, __1.formatIssues)(issues.warnings);
    var err = (0, __1.formatIssues)(issues.errors);
    var pass = true, message = '';
    if (!result.pass && result.errors.length > 0) {
        return {
            pass: !pass,
            message: function () {
                return "Expected to pass, specified map is invalid.\nErrors:\n".concat(err, "\nWarnings:\n").concat(warn, "\n");
            },
        };
    }
    if (warnings && warnings.length > 0) {
        message += 'Expected to find warnings:\n';
        try {
            for (var warnings_2 = __values(warnings), warnings_2_1 = warnings_2.next(); !warnings_2_1.done; warnings_2_1 = warnings_2.next()) {
                var warning = warnings_2_1.value;
                if (!warn.includes(warning)) {
                    if (pass) {
                        pass = false;
                    }
                    message += "\"".concat(warning, "\"\n");
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (warnings_2_1 && !warnings_2_1.done && (_b = warnings_2.return)) _b.call(warnings_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        message += "in original warnings:\n\"".concat(warn, "\"\n");
    }
    return {
        pass: pass,
        message: function () { return message; },
    };
}
expect.extend({
    toBeValidMap: function (map, profileOutput, warnings, errors) {
        var _a;
        var result = (0, __1.validateMap)(profileOutput, map);
        var issues = {
            errors: !result.pass ? result.errors : [],
            warnings: (_a = result.warnings) !== null && _a !== void 0 ? _a : [],
        };
        if (this.isNot) {
            return isNotValid({ result: result, issues: issues, errors: errors, warnings: warnings });
        }
        return isValid({ result: result, issues: issues, errors: errors, warnings: warnings });
    },
    toBeValidExample: function (profile, errors, warnings) {
        var _a;
        var exampleValidator = new example_validator_1.ExampleValidator(profile);
        var result = exampleValidator.validate();
        var issues = {
            errors: !result.pass ? result.errors : [],
            warnings: (_a = result.warnings) !== null && _a !== void 0 ? _a : [],
        };
        if (this.isNot) {
            return isNotValid({ result: result, issues: issues, errors: errors, warnings: warnings });
        }
        return isValid({ result: result, issues: issues, errors: errors, warnings: warnings });
    },
});
// eslint-disable-next-line jest/no-export
function validWithWarnings(profile, maps) {
    var warnings = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        warnings[_i - 2] = arguments[_i];
    }
    var profileOutput = (0, __1.getProfileOutput)(profile);
    it('then validation will pass with warnings', function () {
        maps.forEach(function (map, index) {
            expect(map).toBeValidMap(profileOutput, warnings[index]);
        });
    });
}
exports.validWithWarnings = validWithWarnings;
// eslint-disable-next-line jest/no-export
function invalidWithErrors(profile, maps) {
    var results = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        results[_i - 2] = arguments[_i];
    }
    var profileOutput = (0, __1.getProfileOutput)(profile);
    it('then validation will fail with errors', function () {
        var i = 0;
        maps.forEach(function (map) {
            expect(map).not.toBeValidMap(profileOutput, results[i + 1], results[i]);
            i += 2;
        });
    });
}
exports.invalidWithErrors = invalidWithErrors;
//# sourceMappingURL=validate-custom-matcher.js.map
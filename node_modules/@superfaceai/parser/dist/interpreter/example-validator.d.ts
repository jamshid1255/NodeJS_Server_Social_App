import { ComlinkAssignmentNode, ComlinkListLiteralNode, ComlinkLiteralNode, ComlinkObjectLiteralNode, ComlinkPrimitiveLiteralNode, EnumDefinitionNode, EnumValueNode, FieldDefinitionNode, ListDefinitionNode, ModelTypeNameNode, NamedFieldDefinitionNode, NamedModelDefinitionNode, NonNullDefinitionNode, ObjectDefinitionNode, PrimitiveTypeNameNode, ProfileASTNode, ProfileAstVisitor, ProfileDocumentNode, ProfileHeaderNode, UnionDefinitionNode, UseCaseDefinitionNode, UseCaseExampleNode, UseCaseSlotDefinitionNode } from '@superfaceai/ast';
import { ProfileOutput, ValidationResult } from '.';
export declare class ExampleValidator implements ProfileAstVisitor {
    private readonly profileAst;
    private profileOutput?;
    private errors;
    private warnings;
    private slotType;
    private currentStructure;
    private currentUseCase;
    constructor(profileAst: ProfileASTNode, profileOutput?: ProfileOutput | undefined);
    validate(): ValidationResult;
    visit(node: ComlinkLiteralNode | ComlinkAssignmentNode): boolean;
    visit(node: ProfileASTNode): void;
    visitProfileDocumentNode(node: ProfileDocumentNode): void;
    visitProfileHeaderNode(_node: ProfileHeaderNode): void;
    visitUseCaseDefinitionNode(node: UseCaseDefinitionNode): void;
    visitUseCaseSlotDefinition(node: UseCaseSlotDefinitionNode<ProfileASTNode>): void;
    visitUseCaseExampleNode(node: UseCaseExampleNode): void;
    visitComlinkPrimitiveLiteralNode(node: ComlinkPrimitiveLiteralNode): boolean;
    visitComlinkListLiteralNode(node: ComlinkListLiteralNode): boolean;
    visitComlinkObjectLiteralNode(node: ComlinkObjectLiteralNode): boolean;
    visitComlinkAssignmentNode(node: ComlinkAssignmentNode): boolean;
    visitFieldDefinitionNode(_node: FieldDefinitionNode): void;
    visitModelTypeNameNode(_node: ModelTypeNameNode): void;
    visitNamedFieldDefinitionNode(_node: NamedFieldDefinitionNode): void;
    visitNamedModelDefinitionNode(_node: NamedModelDefinitionNode): void;
    visitNonNullDefinitionNode(_node: NonNullDefinitionNode): void;
    visitUnionDefinitionNode(_node: UnionDefinitionNode): void;
    visitObjectDefinitionNode(_node: ObjectDefinitionNode): void;
    visitListDefinitionNode(_node: ListDefinitionNode): void;
    visitEnumDefinitionNode(_node: EnumDefinitionNode): void;
    visitEnumValueNode(_node: EnumValueNode): void;
    visitPrimitiveTypeNameNode(_node: PrimitiveTypeNameNode): void;
    private structureIsPrepared;
    private getPath;
}

import { AssignmentNode, ComlinkListLiteralNode, ComlinkObjectLiteralNode, ComlinkPrimitiveLiteralNode, LiteralNode, LocationSpan, MapASTNode, MapDefinitionNode, ObjectLiteralNode, OperationDefinitionNode, OutcomeStatementNode, PrimitiveLiteralNode, ProfileASTNode, ProfileDocumentNode } from '@superfaceai/ast';
import * as ts from 'typescript';
import { TypescriptIdentifier } from './constructs';
import { ValidationIssue } from './issue';
import { ValidationResult } from './map-validator';
import { ListStructure, ObjectStructure, ProfileOutput, StructureType, VersionStructure } from './profile-output';
export declare function composeVersion(version: VersionStructure): string;
export declare function formatIssueContext(issue: ValidationIssue): string;
export declare function formatIssues(issues: ValidationIssue[]): string;
export declare function validatePrimitiveLiteral(structure: StructureType, node: PrimitiveLiteralNode | ComlinkPrimitiveLiteralNode): {
    isValid: boolean;
};
export declare function validateObjectLiteral(structure: StructureType, node: ObjectLiteralNode | ComlinkObjectLiteralNode): {
    isValid: true;
    objectStructure: ObjectStructure;
} | {
    isValid: false;
    objectStructure?: undefined;
};
export declare function validateListLiteral(structure: StructureType, node: ComlinkListLiteralNode): {
    isValid: true;
    listStructure: ListStructure;
} | {
    isValid: false;
    listStructure?: undefined;
};
export declare function getOutcomes(node: MapDefinitionNode | OperationDefinitionNode, isErrorFilter?: boolean): OutcomeStatementNode[];
export declare const mergeVariables: (left: Record<string, LiteralNode>, right: Record<string, LiteralNode>) => Record<string, LiteralNode>;
export declare type UseCaseInfo = {
    name: string;
    safety?: 'safe' | 'unsafe' | 'idempotent';
};
export declare const getProfileUsecases: (profile: ProfileDocumentNode) => UseCaseInfo[];
export declare const getProfileOutput: (profile: ProfileDocumentNode) => ProfileOutput;
export declare const validateExamples: (profileAst: ProfileASTNode, profileOutput?: ProfileOutput | undefined) => ValidationResult;
export declare const validateMap: (profileOutput: ProfileOutput, mapAst: MapASTNode) => ValidationResult;
export declare function getTypescriptIdentifier(node: ts.Node): TypescriptIdentifier | undefined;
export declare const REDUDANT_EXPRESSION_CHARACTERS_REGEX: RegExp;
export declare function replaceRedudantCharacters(text: string): string;
export declare function validateObjectStructure(node: TypescriptIdentifier, structure: ObjectStructure): StructureType | undefined;
export declare function findTypescriptIdentifier(name: string, node: ts.Node): boolean;
export declare function findTypescriptProperty(name: string, node: ts.Node): boolean;
export declare function getTypescriptIdentifierName(node: ts.Node): string;
export declare function getVariableName(node: TypescriptIdentifier | ts.LeftHandSideExpression, name?: string): string;
export declare const buildAssignment: (key: string[], value: LiteralNode, location?: LocationSpan | undefined) => AssignmentNode;

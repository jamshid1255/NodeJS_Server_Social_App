"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleValidator = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var _1 = require(".");
var utils_1 = require("./utils");
var debug = (0, debug_1.default)('superface-parser:example-validator');
function assertUnreachable(node) {
    throw new Error("Invalid Node kind: ".concat(node.kind));
}
var ExampleValidator = /** @class */ (function () {
    function ExampleValidator(profileAst, profileOutput) {
        this.profileAst = profileAst;
        this.profileOutput = profileOutput;
        this.errors = [];
        this.warnings = [];
        if (!profileOutput) {
            var profileIOAnalyzer = new _1.ProfileIOAnalyzer();
            this.profileOutput = profileIOAnalyzer.visit(profileAst);
        }
    }
    ExampleValidator.prototype.validate = function () {
        this.visit(this.profileAst);
        return this.errors.length > 0
            ? { pass: false, errors: this.errors, warnings: this.warnings }
            : { pass: true, warnings: this.warnings };
    };
    ExampleValidator.prototype.visit = function (node) {
        debug('Visiting node:', node.kind);
        switch (node.kind) {
            case 'ProfileDocument':
                return this.visitProfileDocumentNode(node);
            case 'ProfileHeader':
                return this.visitProfileHeaderNode(node);
            case 'UseCaseDefinition':
                return this.visitUseCaseDefinitionNode(node);
            case 'UseCaseSlotDefinition':
                return this.visitUseCaseSlotDefinition(node);
            case 'UseCaseExample':
                return this.visitUseCaseExampleNode(node);
            case 'ComlinkPrimitiveLiteral':
                return this.visitComlinkPrimitiveLiteralNode(node);
            case 'ComlinkListLiteral':
                return this.visitComlinkListLiteralNode(node);
            case 'ComlinkObjectLiteral':
                return this.visitComlinkObjectLiteralNode(node);
            case 'ComlinkAssignment':
                return this.visitComlinkAssignmentNode(node);
            // UNUSED
            case 'FieldDefinition':
                return this.visitFieldDefinitionNode(node);
            case 'ModelTypeName':
                return this.visitModelTypeNameNode(node);
            case 'NamedFieldDefinition':
                return this.visitNamedFieldDefinitionNode(node);
            case 'NamedModelDefinition':
                return this.visitNamedModelDefinitionNode(node);
            case 'NonNullDefinition':
                return this.visitNonNullDefinitionNode(node);
            case 'UnionDefinition':
                return this.visitUnionDefinitionNode(node);
            case 'ObjectDefinition':
                return this.visitObjectDefinitionNode(node);
            case 'ListDefinition':
                return this.visitListDefinitionNode(node);
            case 'EnumDefinition':
                return this.visitEnumDefinitionNode(node);
            case 'EnumValue':
                return this.visitEnumValueNode(node);
            case 'PrimitiveTypeName':
                return this.visitPrimitiveTypeNameNode(node);
            default:
                assertUnreachable(node);
        }
    };
    ExampleValidator.prototype.visitProfileDocumentNode = function (node) {
        var e_1, _a;
        var useCases = node.definitions.filter(ast_1.isUseCaseDefinitionNode);
        try {
            for (var useCases_1 = __values(useCases), useCases_1_1 = useCases_1.next(); !useCases_1_1.done; useCases_1_1 = useCases_1.next()) {
                var useCase = useCases_1_1.value;
                this.visit(useCase);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (useCases_1_1 && !useCases_1_1.done && (_a = useCases_1.return)) _a.call(useCases_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ExampleValidator.prototype.visitProfileHeaderNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitUseCaseDefinitionNode = function (node) {
        var e_2, _a;
        this.currentUseCase = node.useCaseName;
        if (node.examples) {
            try {
                for (var _b = __values(node.examples), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var example = _c.value;
                    this.visit(example.value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        this.currentUseCase = undefined;
    };
    ExampleValidator.prototype.visitUseCaseSlotDefinition = function (node) {
        this.visit(node.value);
    };
    ExampleValidator.prototype.visitUseCaseExampleNode = function (node) {
        var _this = this;
        var _a;
        var usecase = (_a = this.profileOutput) === null || _a === void 0 ? void 0 : _a.usecases.find(function (usecase) { return usecase.useCaseName === _this.currentUseCase; });
        if (node.input) {
            this.currentStructure = usecase === null || usecase === void 0 ? void 0 : usecase.input;
            this.slotType = _1.UseCaseSlotType.INPUT;
            this.visit(node.input);
            this.slotType = undefined;
            this.currentStructure = undefined;
        }
        if (node.result) {
            this.currentStructure = usecase === null || usecase === void 0 ? void 0 : usecase.result;
            this.slotType = _1.UseCaseSlotType.RESULT;
            this.visit(node.result);
            this.slotType = undefined;
            this.currentStructure = undefined;
        }
        if (node.asyncResult) {
            this.currentStructure = usecase === null || usecase === void 0 ? void 0 : usecase.async;
            this.slotType = _1.UseCaseSlotType.ASYNCRESULT;
            this.visit(node.asyncResult);
            this.slotType = undefined;
            this.currentStructure = undefined;
        }
        if (node.error) {
            this.currentStructure = usecase === null || usecase === void 0 ? void 0 : usecase.error;
            this.slotType = _1.UseCaseSlotType.ERROR;
            this.visit(node.error);
            this.slotType = undefined;
            this.currentStructure = undefined;
        }
    };
    ExampleValidator.prototype.visitComlinkPrimitiveLiteralNode = function (node) {
        if (this.structureIsPrepared(node)) {
            return true;
        }
        (0, _1.assertDefinedStructure)(this.currentStructure);
        var isValid = (0, utils_1.validatePrimitiveLiteral)(this.currentStructure, node).isValid;
        if (!isValid) {
            this.errors.push({
                kind: 'wrongStructure',
                context: {
                    path: this.getPath(node),
                    expected: this.currentStructure,
                    actual: node,
                },
            });
        }
        return isValid;
    };
    ExampleValidator.prototype.visitComlinkListLiteralNode = function (node) {
        var e_3, _a;
        if (this.structureIsPrepared(node)) {
            return true;
        }
        (0, _1.assertDefinedStructure)(this.currentStructure);
        var validationResult = (0, utils_1.validateListLiteral)(this.currentStructure, node);
        if (!validationResult.isValid) {
            this.errors.push({
                kind: 'wrongStructure',
                context: {
                    path: this.getPath(node),
                    expected: this.currentStructure,
                    actual: node,
                },
            });
            return false;
        }
        var listStructure = validationResult.listStructure;
        var originalStructure = this.currentStructure;
        var result = true;
        try {
            for (var _b = __values(node.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.currentStructure = listStructure.value;
                result && (result = this.visit(item));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.currentStructure = originalStructure;
        return result;
    };
    ExampleValidator.prototype.visitComlinkObjectLiteralNode = function (node) {
        var e_4, _a, e_5, _b;
        if (this.structureIsPrepared(node)) {
            return true;
        }
        (0, _1.assertDefinedStructure)(this.currentStructure);
        var validationResult = (0, utils_1.validateObjectLiteral)(this.currentStructure, node);
        if (!validationResult.isValid) {
            this.errors.push({
                kind: 'wrongStructure',
                context: {
                    path: this.getPath(node),
                    expected: this.currentStructure,
                    actual: node,
                },
            });
            return false;
        }
        var objectStructure = validationResult.objectStructure;
        if (objectStructure.fields === undefined) {
            throw new Error('Validated object structure is not defined or does not contain fields');
        }
        // all fields
        var profileFields = Object.entries(objectStructure.fields);
        var profileFieldNames = Object.keys(objectStructure.fields);
        var mapFieldNames = node.fields.map(function (field) { return field.key[0]; });
        // required fields
        var requiredFields = profileFields.filter(function (_a) {
            var _b = __read(_a, 2), value = _b[1];
            return value.required;
        });
        var requiredFieldsNotFound = requiredFields.filter(function (_a) {
            var _b = __read(_a, 1), key = _b[0];
            return !mapFieldNames.includes(key);
        });
        // fields found inside node
        var matchingFields = node.fields.filter(function (field) {
            return profileFieldNames.includes(field.key[0]);
        });
        var extraFields = node.fields.filter(function (field) { return !profileFieldNames.includes(field.key[0]); });
        var result = true;
        try {
            for (var matchingFields_1 = __values(matchingFields), matchingFields_1_1 = matchingFields_1.next(); !matchingFields_1_1.done; matchingFields_1_1 = matchingFields_1.next()) {
                var field = matchingFields_1_1.value;
                var visitResult = true;
                this.currentStructure = objectStructure.fields[field.key[0]];
                // it should not validate against final value when dot.notation is used
                if (field.key.length > 1) {
                    var _c = __read(field.key), head = _c[0], tail = _c.slice(1);
                    var assignment = {
                        kind: 'ComlinkAssignment',
                        key: [head],
                        value: {
                            kind: 'ComlinkObjectLiteral',
                            fields: [
                                {
                                    kind: 'ComlinkAssignment',
                                    key: tail,
                                    value: field.value,
                                },
                            ],
                        },
                    };
                    visitResult = this.visit(assignment);
                }
                else {
                    visitResult = this.visit(field);
                }
                result && (result = visitResult);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (matchingFields_1_1 && !matchingFields_1_1.done && (_a = matchingFields_1.return)) _a.call(matchingFields_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var requiredFieldsNotFound_1 = __values(requiredFieldsNotFound), requiredFieldsNotFound_1_1 = requiredFieldsNotFound_1.next(); !requiredFieldsNotFound_1_1.done; requiredFieldsNotFound_1_1 = requiredFieldsNotFound_1.next()) {
                var _d = __read(requiredFieldsNotFound_1_1.value, 2), value = _d[1];
                result = false;
                this.errors.push({
                    kind: 'missingRequired',
                    context: {
                        path: this.getPath(node),
                        expected: value ? value.kind : 'undefined',
                    },
                });
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (requiredFieldsNotFound_1_1 && !requiredFieldsNotFound_1_1.done && (_b = requiredFieldsNotFound_1.return)) _b.call(requiredFieldsNotFound_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        if (extraFields.length > 0) {
            this.warnings.push({
                kind: 'wrongObjectStructure',
                context: {
                    path: this.getPath(node),
                    expected: objectStructure,
                    actual: node,
                },
            });
        }
        return result;
    };
    ExampleValidator.prototype.visitComlinkAssignmentNode = function (node) {
        return this.visit(node.value);
    };
    ExampleValidator.prototype.visitFieldDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitModelTypeNameNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitNamedFieldDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitNamedModelDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitNonNullDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitUnionDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitObjectDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitListDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitEnumDefinitionNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitEnumValueNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.visitPrimitiveTypeNameNode = function (_node) {
        throw new Error('not implemented');
    };
    ExampleValidator.prototype.structureIsPrepared = function (node) {
        if (!this.slotType) {
            throw new Error('No slot type defined');
        }
        if (!this.currentStructure) {
            this.warnings.push({
                kind: 'useCaseSlotNotFound',
                context: {
                    path: this.getPath(node),
                    expected: this.slotType,
                    actual: node,
                },
            });
            return true;
        }
        if ((0, _1.isNonNullStructure)(this.currentStructure)) {
            this.currentStructure = this.currentStructure.value;
        }
        if ((0, _1.isScalarStructure)(this.currentStructure)) {
            return true;
        }
        return false;
    };
    ExampleValidator.prototype.getPath = function (node) {
        return {
            kind: node.kind,
            location: node.location,
        };
    };
    return ExampleValidator;
}());
exports.ExampleValidator = ExampleValidator;
//# sourceMappingURL=example-validator.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAssignment = exports.getVariableName = exports.getTypescriptIdentifierName = exports.findTypescriptProperty = exports.findTypescriptIdentifier = exports.validateObjectStructure = exports.replaceRedudantCharacters = exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX = exports.getTypescriptIdentifier = exports.validateMap = exports.validateExamples = exports.getProfileOutput = exports.getProfileUsecases = exports.mergeVariables = exports.getOutcomes = exports.validateListLiteral = exports.validateObjectLiteral = exports.validatePrimitiveLiteral = exports.formatIssues = exports.formatIssueContext = exports.composeVersion = void 0;
var ast_1 = require("@superfaceai/ast");
var ts = __importStar(require("typescript"));
var example_validator_1 = require("./example-validator");
var issue_1 = require("./issue");
var map_validator_1 = require("./map-validator");
var profile_io_analyzer_1 = require("./profile-io-analyzer");
var profile_output_utils_1 = require("./profile-output.utils");
function composeVersion(version) {
    return ("".concat(version.major, ".").concat(version.minor) +
        (version.patch !== undefined ? ".".concat(version.patch) : '') +
        (version.label ? "-".concat(version.label) : ''));
}
exports.composeVersion = composeVersion;
function formatPrimitive(value) {
    if (typeof value === 'string') {
        return "\"".concat(value, "\"");
    }
    return value.toString();
}
function formatStructure(structure) {
    var _a;
    if (typeof structure === 'string') {
        return structure;
    }
    switch (structure.kind) {
        case 'EnumStructure':
            return structure.enums.map(function (enumValue) { return enumValue.value; }).join(' or ');
        case 'ListStructure':
            return "[".concat(formatStructure(structure.value), "]");
        case 'NonNullStructure':
            return "".concat(formatStructure(structure.value), "!");
        case 'ObjectStructure':
            return "{".concat(Object.entries((_a = structure.fields) !== null && _a !== void 0 ? _a : [])
                .map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], type = _b[1];
                return "".concat(key, ": ").concat(formatStructure(type));
            })
                .join(', '), "}");
        case 'PrimitiveStructure':
            return structure.type;
        case 'ScalarStructure':
            return 'any';
        case 'UnionStructure':
            return structure.types.map(function (type) { return formatStructure(type); }).join(' | ');
    }
}
function formatLiteral(literal) {
    var _a;
    if (typeof literal === 'string') {
        return literal;
    }
    switch (literal.kind) {
        case 'PrimitiveLiteral':
        case 'ComlinkPrimitiveLiteral':
            return formatPrimitive(literal.value);
        case 'ObjectLiteral':
        case 'ComlinkObjectLiteral':
            return "{".concat(literal.fields.map(formatLiteral).join(', '), "}");
        case 'JessieExpression':
            return (_a = literal.source) !== null && _a !== void 0 ? _a : literal.expression;
        case 'InlineCall':
            return "call ".concat(literal.operationName, "(").concat(literal.arguments
                .map(formatLiteral)
                .join(', '), ")");
        case 'ComlinkListLiteral':
            return "[".concat(literal.items.map(formatLiteral).join(', '), "]");
        case 'ComlinkAssignment':
        case 'Assignment':
            return "".concat(literal.key.join('.'), ": ").concat(formatLiteral(literal.value));
    }
}
function formatIssueContext(issue) {
    var _a, _b;
    var expected;
    var actual;
    switch (issue.kind) {
        case 'wrongScope':
            return "Wrong Scope: expected ".concat((_a = issue.context.expected) !== null && _a !== void 0 ? _a : 'no scope in profile', ", but got ").concat((_b = issue.context.actual) !== null && _b !== void 0 ? _b : 'no scope in map');
        case 'wrongProfileName':
            return "Wrong Profile Name: expected \"".concat(issue.context.expected, "\", but got \"").concat(issue.context.actual, "\"");
        case 'wrongProfileVersion':
            return "Version does not match: expected \"".concat(composeVersion(issue.context.expected), "\", but map requests \"").concat(composeVersion(issue.context.actual), "\"");
        case 'mapNotFound':
            return "Map not found: \"".concat(issue.context.expected, "\"");
        case 'extraMapsFound':
            return "Extra Maps Found: \"".concat(issue.context.expected.join(','), "\", but got \"").concat(issue.context.actual.join(', '), "\"");
        case 'outcomeNotDefined':
            return "No ".concat(issue.context.slot, " outcome defined");
        case 'useCaseSlotNotFound':
            actual = "".concat(issue.context.expected === issue_1.UseCaseSlotType.INPUT ? '' : 'returning ').concat(formatLiteral(issue.context.actual));
            return "".concat(issue.context.expected, " Not Found: ").concat(actual, ", but there is no ").concat(issue.context.expected, " defined in usecase");
        case 'wrongObjectStructure':
            expected = formatStructure(issue.context.expected);
            actual = formatLiteral(issue.context.actual);
            return "Wrong Object Structure: expected ".concat(expected, ", but got ").concat(actual);
        case 'wrongStructure':
            expected = formatStructure(issue.context.expected);
            actual = formatLiteral(issue.context.actual);
            return "Wrong Structure: expected ".concat(expected, ", but got ").concat(actual);
        case 'missingRequired':
            return 'Missing required field';
        case 'wrongInput':
            expected = formatStructure(issue.context.expected);
            actual = formatStructure(issue.context.actual);
            return "Wrong Input Structure: expected ".concat(expected, ", but got ").concat(actual);
        case 'wrongVariableStructure':
            expected = formatStructure(issue.context.expected);
            actual = formatLiteral(issue.context.actual);
            return "Wrong Variable Structure: variable ".concat(issue.context.name, " expected ").concat(expected, ", but got ").concat(actual);
        default:
            throw new Error('Invalid issue!');
    }
}
exports.formatIssueContext = formatIssueContext;
function formatIssues(issues) {
    return issues
        .map(function (issue) {
        var _a = issue.context.path, kind = _a.kind, location = _a.location;
        var path = location
            ? "".concat(location.start.line, ":").concat(location.start.column, " ").concat(kind)
            : kind;
        return "".concat(path, " - ").concat(formatIssueContext(issue));
    })
        .join('\n');
}
exports.formatIssues = formatIssues;
function validatePrimitiveLiteral(structure, node) {
    var e_1, _a;
    if (structure.kind === 'PrimitiveStructure' &&
        typeof node.value === structure.type) {
        return { isValid: true };
    }
    if (structure.kind === 'EnumStructure' &&
        structure.enums.find(function (enumValue) { return enumValue.value === node.value; }) !==
            undefined) {
        return { isValid: true };
    }
    if (structure.kind === 'UnionStructure') {
        try {
            for (var _b = __values(structure.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                var result = validatePrimitiveLiteral(type, node);
                if (result.isValid) {
                    return result;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return { isValid: false };
}
exports.validatePrimitiveLiteral = validatePrimitiveLiteral;
function validateObjectLiteral(structure, node) {
    var e_2, _a;
    if (structure.kind === 'ObjectStructure') {
        return { isValid: true, objectStructure: structure };
    }
    if (structure.kind === 'UnionStructure') {
        try {
            for (var _b = __values(structure.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                var result = validateObjectLiteral(type, node);
                if (result.isValid) {
                    return result;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    return { isValid: false };
}
exports.validateObjectLiteral = validateObjectLiteral;
function validateListLiteral(structure, node) {
    var e_3, _a;
    if (structure.kind === 'ListStructure') {
        return { isValid: true, listStructure: structure };
    }
    if (structure.kind === 'UnionStructure') {
        try {
            for (var _b = __values(structure.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                var result = validateListLiteral(type, node);
                if (result.isValid) {
                    return result;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    return { isValid: false };
}
exports.validateListLiteral = validateListLiteral;
function getOutcomes(node, isErrorFilter) {
    var filterFunction = function (input) {
        if (!(0, ast_1.isOutcomeStatementNode)(input)) {
            return false;
        }
        if (isErrorFilter !== undefined && input.isError !== isErrorFilter) {
            return false;
        }
        return true;
    };
    var outcomes = node.statements
        .filter(filterFunction)
        .concat(node.statements
        .filter(ast_1.isCallStatementNode)
        .flatMap(function (callStatement) {
        return callStatement.statements.filter(filterFunction);
    }))
        .concat(node.statements
        .filter(ast_1.isHttpCallStatementNode)
        .flatMap(function (httpCall) {
        return httpCall.responseHandlers.flatMap(function (responseHandler) {
            return responseHandler.statements.filter(filterFunction);
        });
    }));
    return outcomes;
}
exports.getOutcomes = getOutcomes;
var mergeVariables = function (left, right) {
    var e_4, _a, e_5, _b;
    var result = {};
    try {
        for (var _c = __values(Object.keys(left)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var key = _d.value;
            result[key] = left[key];
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_4) throw e_4.error; }
    }
    try {
        for (var _e = __values(Object.keys(right)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var key = _f.value;
            result[key] = right[key];
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return result;
};
exports.mergeVariables = mergeVariables;
var getProfileUsecases = function (profile) {
    return profile.definitions
        .filter(ast_1.isUseCaseDefinitionNode)
        .map(function (definition) { return ({
        name: definition.useCaseName,
        safety: definition.safety,
    }); });
};
exports.getProfileUsecases = getProfileUsecases;
var getProfileOutput = function (profile) {
    var analyzer = new profile_io_analyzer_1.ProfileIOAnalyzer();
    return analyzer.visit(profile);
};
exports.getProfileOutput = getProfileOutput;
var validateExamples = function (profileAst, profileOutput) {
    var exampleValidator = new example_validator_1.ExampleValidator(profileAst, profileOutput);
    return exampleValidator.validate();
};
exports.validateExamples = validateExamples;
var validateMap = function (profileOutput, mapAst) {
    var mapValidator = new map_validator_1.MapValidator(mapAst, profileOutput);
    return mapValidator.validate();
};
exports.validateMap = validateMap;
function getTypescriptIdentifier(node) {
    if (ts.isPropertyAccessExpression(node) ||
        ts.isElementAccessExpression(node) ||
        ts.isIdentifier(node)) {
        return node;
    }
    return ts.forEachChild(node, getTypescriptIdentifier);
}
exports.getTypescriptIdentifier = getTypescriptIdentifier;
exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX = /['"[\]]/g;
function replaceRedudantCharacters(text) {
    return text.replace(exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX, '');
}
exports.replaceRedudantCharacters = replaceRedudantCharacters;
function validateObjectStructure(node, structure) {
    if (ts.isIdentifier(node)) {
        return structure;
    }
    var expression;
    var name;
    if (ts.isElementAccessExpression(node)) {
        expression = node.expression;
        name = node.argumentExpression;
    }
    else {
        expression = node.expression;
        name = node.name;
    }
    var key = replaceRedudantCharacters(name.getText());
    var outputStructure;
    if (ts.isPropertyAccessExpression(expression) ||
        ts.isElementAccessExpression(expression)) {
        outputStructure = validateObjectStructure(expression, structure);
    }
    else if (ts.isIdentifier(expression)) {
        if (!structure.fields) {
            return undefined;
        }
        return structure.fields[key];
    }
    if (!outputStructure ||
        !(0, profile_output_utils_1.isObjectStructure)(outputStructure) ||
        !outputStructure.fields) {
        return undefined;
    }
    return outputStructure.fields[key];
}
exports.validateObjectStructure = validateObjectStructure;
function findTypescriptIdentifier(name, node) {
    if (ts.isPropertyAccessExpression(node) ||
        ts.isElementAccessExpression(node)) {
        return findTypescriptIdentifier(name, node.expression);
    }
    if (ts.isIdentifier(node)) {
        return node.text === name;
    }
    return false;
}
exports.findTypescriptIdentifier = findTypescriptIdentifier;
function findTypescriptProperty(name, node) {
    if (ts.isPropertyAccessExpression(node)) {
        return ts.isIdentifier(node.expression)
            ? name === node.name.text
            : findTypescriptProperty(name, node.expression);
    }
    if (ts.isElementAccessExpression(node)) {
        return ts.isIdentifier(node.expression)
            ? name === replaceRedudantCharacters(node.argumentExpression.getText())
            : findTypescriptProperty(name, node.expression);
    }
    return false;
}
exports.findTypescriptProperty = findTypescriptProperty;
function getTypescriptIdentifierName(node) {
    if (ts.isIdentifier(node)) {
        return node.text;
    }
    if (ts.isPropertyAccessExpression(node)) {
        return replaceRedudantCharacters(node.getText());
    }
    if (ts.isElementAccessExpression(node)) {
        return replaceRedudantCharacters("".concat(node.expression.getText(), ".").concat(node.argumentExpression.getText()));
    }
    return 'undefined';
}
exports.getTypescriptIdentifierName = getTypescriptIdentifierName;
function getVariableName(node, name) {
    name = name ? replaceRedudantCharacters(name) : '';
    if (ts.isIdentifier(node) || ts.isStringLiteral(node)) {
        return name !== '' ? "".concat(node.text, ".").concat(name) : node.text;
    }
    if (ts.isPropertyAccessExpression(node)) {
        name = name !== '' ? "".concat(node.name.text, ".").concat(name) : node.name.text;
        return getVariableName(node.expression, name);
    }
    if (ts.isElementAccessExpression(node)) {
        var nodeName = node.argumentExpression.text;
        name = name !== '' ? "".concat(nodeName, ".").concat(name) : nodeName;
        return getVariableName(node.expression, name);
    }
    return 'undefined';
}
exports.getVariableName = getVariableName;
var buildAssignment = function (key, value, location) { return ({ kind: 'Assignment', key: key, value: value, location: location }); };
exports.buildAssignment = buildAssignment;
//# sourceMappingURL=utils.js.map
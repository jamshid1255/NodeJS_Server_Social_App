import * as ts from 'typescript';
import { CharIndexSpan } from '../source';
import { ValidatorDiagnostic } from './validator/validator';
export declare type ScriptDiagnostic = {
    detail: string;
    hints: string[];
    relativeSpan: CharIndexSpan;
};
export declare class ScriptCompiler {
    protected readonly sourceText: string;
    private static SOURCE_NAME;
    private static TRANSPILE_TARGET;
    protected readonly sourceFile: ts.SourceFile;
    protected readonly tsProgram: ts.Program;
    constructor(sourceText: string);
    private static buildTranspileOptions;
    private static getNewLineCharacter;
    private static buildCompilerHost;
    diagnose(): ScriptDiagnostic[];
    validate(): ValidatorDiagnostic[];
    transpile(): {
        output: string;
        sourceMap: string;
    };
    private static assertSourceMapFormat;
}
export declare class ScriptExpressionCompiler extends ScriptCompiler {
    private static SCRIPT_WRAP;
    /** @internal */
    static fixupRelativeSpan(relativeSpan: CharIndexSpan): CharIndexSpan;
    constructor(sourceExpression: string);
    /** @internal */
    get rawExpressionNode(): ts.Expression;
    diagnose(): ScriptDiagnostic[];
    validate(): ValidatorDiagnostic[];
    transpile(): {
        output: string;
        sourceMap: string;
    };
}

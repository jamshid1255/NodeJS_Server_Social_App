"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.fetchRequest = exports.createUrl = exports.NetworkErrors = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var util_1 = require("util");
var object_1 = require("../../../lib/object");
var pipe_1 = require("../../../lib/pipe/pipe");
var errors_1 = require("../../errors");
var errors_helpers_1 = require("../../errors.helpers");
var variables_1 = require("../variables");
var filters_1 = require("./filters");
var security_1 = require("./security");
var debug = debug_1.default('superface:http');
var debugSensitive = debug_1.default('superface:http:sensitive');
debugSensitive("\nWARNING: YOU HAVE ALLOWED LOGGING SENSITIVE INFORMATION.\nTHIS LOGGING LEVEL DOES NOT PREVENT LEAKING SECRETS AND SHOULD NOT BE USED IF THE LOGS ARE GOING TO BE SHARED.\nCONSIDER DISABLING SENSITIVE INFORMATION LOGGING BY APPENDING THE DEBUG ENVIRONMENT VARIABLE WITH \",-*:sensitive\".\n");
var NetworkErrors;
(function (NetworkErrors) {
    NetworkErrors["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
})(NetworkErrors = exports.NetworkErrors || (exports.NetworkErrors = {}));
function replaceParameters(url, parameters) {
    var e_1, _a;
    var result = '';
    var lastIndex = 0;
    var allKeys = [];
    var missingKeys = [];
    var regex = RegExp('{([^}]*)}', 'g');
    try {
        for (var _b = __values(url.matchAll(regex)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var match = _c.value;
            var start = match.index;
            // Why can this be undefined?
            if (start === undefined) {
                throw new errors_1.UnexpectedError('Invalid regex match state - missing start index');
            }
            var end = start + match[0].length;
            var key = match[1].trim();
            var value = variables_1.getValue(parameters, key.split('.'));
            allKeys.push(key);
            if (value === undefined) {
                missingKeys.push(key);
                continue;
            }
            result += url.slice(lastIndex, start);
            result += variables_1.variableToString(value);
            lastIndex = end;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    result += url.slice(lastIndex);
    if (missingKeys.length > 0) {
        var available = object_1.recursiveKeyList(parameters !== null && parameters !== void 0 ? parameters : {});
        throw errors_helpers_1.missingPathReplacementError(missingKeys, url, allKeys, available);
    }
    return result;
}
var createUrl = function (inputUrl, parameters) {
    var _a, _b;
    var baseUrl = replaceParameters(parameters.baseUrl, (_a = parameters.integrationParameters) !== null && _a !== void 0 ? _a : {});
    if (inputUrl === '') {
        return baseUrl;
    }
    var isRelative = /^\/[^/]/.test(inputUrl);
    if (!isRelative) {
        throw new errors_1.UnexpectedError('Expected relative url, but received absolute!');
    }
    var url = replaceParameters(inputUrl, (_b = parameters.pathParameters) !== null && _b !== void 0 ? _b : {});
    return baseUrl.replace(/\/+$/, '') + url;
};
exports.createUrl = createUrl;
function fetchRequest(fetchInstance, request) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var hasSearchParams, searchParams, response, headers;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    debug('Executing HTTP Call');
                    // secrets might appear in headers, url path, query parameters or body
                    if (debugSensitive.enabled) {
                        hasSearchParams = Object.keys(request.queryParameters || {}).length > 0;
                        searchParams = new URLSearchParams(request.queryParameters);
                        debugSensitive('\t%s %s%s HTTP/1.1', request.method || 'UNKNOWN METHOD', request.url, hasSearchParams ? '?' + searchParams.toString() : '');
                        Object.entries(request.headers || {}).forEach(function (_a) {
                            var _b = __read(_a, 2), headerName = _b[0], value = _b[1];
                            return debugSensitive("\t" + headerName + ": " + (Array.isArray(value) ? value.join(', ') : value));
                        });
                        if (request.body !== undefined) {
                            debugSensitive("\n" + util_1.inspect(request.body, true, 5));
                        }
                    }
                    return [4 /*yield*/, fetchInstance.fetch(request.url, request)];
                case 1:
                    response = _b.sent();
                    debug('Received response');
                    if (debugSensitive.enabled) {
                        debugSensitive("\tHTTP/1.1 " + response.status + " " + response.statusText);
                        Object.entries(response.headers).forEach(function (_a) {
                            var _b = __read(_a, 2), headerName = _b[0], value = _b[1];
                            return debugSensitive("\t" + headerName + ": " + value);
                        });
                        debugSensitive('\n\t%j', response.body);
                    }
                    headers = {};
                    Object.entries((_a = request.headers) !== null && _a !== void 0 ? _a : {}).forEach(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        headers[key] = Array.isArray(value) ? value.join(' ') : value;
                    });
                    return [2 /*return*/, {
                            statusCode: response.status,
                            body: response.body,
                            headers: response.headers,
                            debug: {
                                request: {
                                    url: request.url,
                                    headers: headers,
                                    body: request.body,
                                },
                            },
                        }];
            }
        });
    });
}
exports.fetchRequest = fetchRequest;
var HttpClient = /** @class */ (function () {
    function HttpClient(fetchInstance) {
        this.fetchInstance = fetchInstance;
    }
    HttpClient.prototype.request = function (url, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParameters, handler, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParameters = __assign(__assign({ url: url }, parameters), { headers: variables_1.variablesToStrings(parameters === null || parameters === void 0 ? void 0 : parameters.headers) });
                        handler = createSecurityHandler(this.fetchInstance, requestParameters.securityConfiguration, requestParameters.securityRequirements);
                        return [4 /*yield*/, pipe_1.pipe({
                                parameters: requestParameters,
                            }, filters_1.authenticateFilter(handler), filters_1.prepareRequestFilter, filters_1.withRequest(filters_1.fetchFilter(this.fetchInstance)), filters_1.withResponse(filters_1.handleResponseFilter(this.fetchInstance, handler)))];
                    case 1:
                        result = _a.sent();
                        if (result.response === undefined) {
                            throw new errors_1.UnexpectedError('Response is undefined');
                        }
                        return [2 /*return*/, result.response];
                }
            });
        });
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
function createSecurityHandler(fetchInstance, securityConfiguration, securityRequirements) {
    var e_2, _a;
    if (securityConfiguration === void 0) { securityConfiguration = []; }
    if (securityRequirements === void 0) { securityRequirements = []; }
    var handler = undefined;
    var _loop_1 = function (requirement) {
        var configuration = securityConfiguration.find(function (configuration) { return configuration.id === requirement.id; });
        if (configuration === undefined) {
            throw errors_helpers_1.missingSecurityValuesError(requirement.id);
        }
        if (configuration.type === ast_1.SecurityType.APIKEY) {
            handler = new security_1.ApiKeyHandler(configuration);
        }
        else if (configuration.scheme === ast_1.HttpScheme.DIGEST) {
            handler = new security_1.DigestHandler(configuration, fetchInstance);
        }
        else {
            handler = new security_1.HttpHandler(configuration);
        }
    };
    try {
        for (var securityRequirements_1 = __values(securityRequirements), securityRequirements_1_1 = securityRequirements_1.next(); !securityRequirements_1_1.done; securityRequirements_1_1 = securityRequirements_1.next()) {
            var requirement = securityRequirements_1_1.value;
            _loop_1(requirement);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (securityRequirements_1_1 && !securityRequirements_1_1.done && (_a = securityRequirements_1.return)) _a.call(securityRequirements_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return handler;
}
//# sourceMappingURL=http.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evalScript = void 0;
var debug_1 = __importDefault(require("debug"));
var vm2_1 = require("vm2");
var config_1 = require("../../../config");
var stdlib_1 = require("./stdlib");
var debug = debug_1.default('superface:sandbox');
function vm2ExtraArrayKeysFixup(value) {
    var e_1, _a;
    if (typeof value !== 'object') {
        return value;
    }
    if (value === null) {
        return value;
    }
    if (Buffer.isBuffer(value) || value instanceof ArrayBuffer) {
        return value;
    }
    if (Array.isArray(value)) {
        var newArray = [];
        for (var i = 0; i < value.length; i += 1) {
            newArray[i] = vm2ExtraArrayKeysFixup(value[i]);
        }
        return newArray;
    }
    var newObject = {};
    var currentObject = value;
    try {
        for (var _b = __values(Object.keys(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            newObject[key] = vm2ExtraArrayKeysFixup(currentObject[key]);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return newObject;
}
function evalScript(js, variableDefinitions) {
    var vm = new vm2_1.VM({
        sandbox: __assign({ std: stdlib_1.getStdlib() }, variableDefinitions),
        compiler: 'javascript',
        wasm: false,
        eval: false,
        timeout: config_1.Config.instance().sandboxTimeout,
        fixAsync: true,
    });
    // Defensively delete global objects
    // These deletions mostly don't protect, but produce "nicer" errors for the user
    vm.run("\n    'use strict'\n\n    delete global.require // Forbidden\n    delete global.process // Forbidden\n    delete global.console // Forbidden/useless\n\n    delete global.setTimeout\n    delete global.setInterval\n    delete global.setImmediate\n    delete global.clearTimeout\n    delete global.clearInterval\n    delete global.clearImmediate\n    // delete global.String\n    // delete global.Number\n    // delete global.Buffer\n    // delete global.Boolean\n    // delete global.Array\n    // delete global.Date\n    // delete global.RegExp // Forbidden - needed for object literals to work, weirdly\n    delete global.Function // Can be restored by taking .constructor of any function, but the VM protection kicks in\n    // delete global.Object\n    delete global.VMError // Useless\n    delete global.Proxy // Forbidden\n    delete global.Reflect // Forbidden\n    // delete global.Promise // Forbidden, also VM protection - BUT needed for object literals to work, weirdly\n    delete global.Symbol // Forbidden\n\n    delete global.eval // Forbidden, also VM protects\n    delete global.WebAssembly // Forbidden, also VM protects\n    delete global.AsyncFunction // Forbidden, also VM protects\n    delete global.SharedArrayBuffer // Just in case\n    ");
    debug('Evaluating:', js);
    var result = vm.run("'use strict';const vmResult = " + js + ";vmResult");
    var resultVm2Fixed = vm2ExtraArrayKeysFixup(result);
    debug('Result:', resultVm2Fixed);
    return resultVm2Fixed;
}
exports.evalScript = evalScript;
//# sourceMappingURL=sandbox.js.map